@using AzNamingTool.Helpers
@using AzNamingTool.Models
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject IToastService toastService

<div class="card" style="float:right; margin-top:-8px;">
    <div class="card-header text-white bg-success">
        <a class="link-light text-decoration-none" data-toggle="collapse" href="#admin" role="button" aria-expanded="false" aria-controls="admin">
            Admin
        </a>
    </div>
    <div class="collapse card card-body" id="admin">
        @if (!admin)
        {
            <div class="mb-3">
                <div class="form-group mb-3">
                    <label for="password">Password</label>
                    <input class="form-control mb-3" type="password" @onchange="@((ui) => { SetFormValue("login",(string)ui.Value);})" />
                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("login"))" title="Login">Login</button>
                </div>
            </div>
        }
        else
        {
            <div class="mb-3">
                <div class="form-group mb-3">
                    <label for="newpassword">New Password</label>
                    <input id="newpassword" class="form-control mb-3" type="password" @onchange="@((ui) => { SetFormValue("password",(string)ui.Value);})" />
                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("password"))" title="Save">Save</button>
                </div>

                <div class="form-group mb-3">
                    <label for="apiKey">API Key</label><br />
                    <input id="currentapikey" class="form-control mb-3" type="text" @onchange="@((ui) => { SetFormValue("apikey",(string)ui.Value);})" value="@currentapikey" />
                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("apikeysave"))" title="Save">Save</button>
                    <button type="button" class="btn btn-success" @onclick="@(e => AdminFormAction("apikeygenerate"))" title="Generate">Generate</button>
                </div>
            </div>
            <div class="mb-3">
                <button type="button" class="btn btn-secondary" @onclick="@(e => AdminFormAction("logout"))" title="Logout" data-toggle="collapse" href="#admin">Logout</button>
            </div>
        }
    </div>
</div>
<div style="clear:both"></div>

@code {
    private ServicesData servicesData = new();
    private string? currentpassword;
    private string? newpassword;
    private string? currentapikey;
    private ResponseMessage message = new();
    private bool admin;


    [Parameter] public EventCallback OnAdminChange { get; set; }


    private Config config = new ConfigurationBuilder()
            .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
            .AddJsonFile("settings/appsettings.json")
            .Build()
            .Get<Config>();

    protected override void OnInitialized()
    {
        admin = state.Admin;
        if(admin)
        {            
            currentapikey = GeneralHelper.DecryptString(config.APIKey, config.SALTKey);
        }
    }


    private async void AdminFormAction(string action)
    {
        message = new ResponseMessage();

        bool updateConfig = false;

        message.Header = "INFORMATION";
        message.Type = MessageTypesEnum.INFORMATION;

        switch (action)
        {
            case "login":
                // Check the password

                if (currentpassword == GeneralHelper.DecryptString(config.AdminPassword, config.SALTKey))
                {
                    state.SetAdmin(true);
                    // Load the current API Key
                    currentapikey = GeneralHelper.DecryptString(config.APIKey, config.SALTKey);
                }
                else
                {
                    state.SetAdmin(false);
                    message.Type = MessageTypesEnum.ERROR;
                    message.Header = "ERROR";
                    message.Message = "Login failed";
                }
                break;
            case "logout":
                state.SetAdmin(false);
                break;
            case "password":
                bool confirmPassword = await JsRuntime.InvokeAsync<bool>("confirm", "This will change the admin password. Are you sure?");
                if (confirmPassword)
                {
                    // Set the new admin password
                    config.AdminPassword = GeneralHelper.EncryptString(newpassword, config.SALTKey);
                    updateConfig = true;
                    message.Type = MessageTypesEnum.SUCCESS;
                    message.Header = "SUCCESS";
                    message.Message = "Password updated!";
                }
                break;
            case "apikeysave":

                bool confrimAPIKeySave = await JsRuntime.InvokeAsync<bool>("confirm", "This will update the current API Key. Are you sure?");
                if (confrimAPIKeySave)
                {
                    config.APIKey = GeneralHelper.EncryptString(currentapikey, config.SALTKey);
                    updateConfig = true;
                    message.Type = MessageTypesEnum.SUCCESS;
                    message.Header = "SUCCESS";
                    message.Message = "API Key updated!";
                }
                break;
            case "apikeygenerate":

                bool confrimAPIKeyGenerate = await JsRuntime.InvokeAsync<bool>("confirm", "This will generate a new API Key. Are you sure?");
                if (confrimAPIKeyGenerate)
                {
                    // Set the new api key
                    Guid guid = Guid.NewGuid();
                    config.APIKey = GeneralHelper.EncryptString(guid.ToString(), config.SALTKey);
                    currentapikey = guid.ToString();
                    updateConfig = true;
                    message.Type = MessageTypesEnum.SUCCESS;
                    message.Header = "SUCCESS";
                    message.Message = "API Key generated!";
                }
                break;
        }

        if (updateConfig)
        {
            GeneralHelper.UpdateSettings(config);
        }

        await InvokeAsync(() =>
        {
            base.StateHasChanged();
        });

        admin = state.Admin;

        await OnAdminChange.InvokeAsync(admin);

        if (message.Message != null)
        {
            switch (message.Type)
            {
                case MessageTypesEnum.INFORMATION:
                    toastService.ShowInfo(message.Message, "INFORMATION");
                    break;
                case MessageTypesEnum.SUCCESS:                
                toastService.ShowSuccess(message.Message, "SUCCESS");
                break;
                case MessageTypesEnum.WARNING:                
                toastService.ShowWarning(message.Message, "WARNING");
                break;
                case MessageTypesEnum.ERROR:                
                toastService.ShowError(message.Message, "ERROR");
                break;
            }
        }
    }

    private void SetFormValue(string type, string value)
    {
        switch (type)
        {
            case "login":
                currentpassword = value;
                break;
            case "password":
                newpassword = value;
                break;
            case "apikey":
                currentapikey = value;
                break;

        }
    }
}
