@using AzNamingTool.Helpers
@using AzNamingTool.Models
@using AzNamingTool.Services
@inject IToastService toastService


<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header bg-info">
                <h3 class="modal-title text-white">Edit Resource Type</h3>
            </div>
            <div class="modal-body">
                <p>
                    Use the form below to update the resource type.
                </p>
                <p>
                </p>
                <div class="form-group">
                    <label for="resourcename">Resource</label>
                    <input value="@resourceName" type="text" disabled class="form-control" id="resourcename" />
                </div>

                <div class="form-group">
                    <label for="shortName">Short Name</label>
                    <input value="@resourceShortName" type="text" class="form-control" id="shortname" @onchange="@((ui) => { resourceShortName = (string)ui.Value;})" />
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="SaveResourceType" class="btn btn-primary">Submit</button>
                <button @onclick="ModalInstance.CancelAsync" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public int resourceTypeId { get; set; }

    ResourceType resourceType { get; set; }

    private ServiceResponse serviceResponse = new();
    private string? resourceName;
    private string? resourceShortName;

    protected override async void OnInitialized()
    {
        serviceResponse = await ResourceTypeService.GetItem(resourceTypeId);
        resourceType = (ResourceType)serviceResponse.ResponseObject;
        resourceName = resourceType.Resource;
        resourceShortName = resourceType.ShortName;
    }

    async void SaveResourceType()
    {
        resourceType.ShortName = resourceShortName;
        serviceResponse = await ResourceTypeService.PostItem(resourceType);
        if (serviceResponse.Success)
        {
            ModalInstance.CloseAsync(ModalResult.Ok<ResourceType>(resourceType));
            toastService.ShowSuccess("Resource Type updated!", "SUCCESS");
        }
        else
        {
            toastService.ShowError("There was an error updating the Resource Type", "ERROR");
        }
    }


    async Task Cancel() => await ModalInstance.CancelAsync();

}