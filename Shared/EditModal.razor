@using AzNamingTool.Helpers
@using AzNamingTool.Models
@using AzNamingTool.Services
@using AzNamingTool.Helpers
@using Microsoft.AspNetCore.Html
@inject IToastService toastService

<div class="modal fade show d-block" tabindex="-1" role="dialog">
    <div class="modal-backdrop fade show" @onclick="Cancel"></div>
    <div class="modal-dialog" style="z-index: 1050">
        <!-- Pop it above the backdrop -->
        <div class="modal-content">
            <div class="modal-header bg-primary">
                <h3 class="modal-title text-white">@title</h3>
            </div>
            <div class="modal-body">
                <p>
                    @((MarkupString)message)
                </p>
                <div class="form-group">
                    <label for="name">Name</label>
                    @if (protectedName)
                    {
                        <input value="@itemName" disabled type="text" class="form-control" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                    }
                    else
                    {
                        <input value="@itemName" type="text" class="form-control" id="name" @onchange="@((ui) => { itemName = (string)ui.Value;})" />
                    }
                </div>

                <div class="form-group">
                    <label for="shortName">Short Name</label>
                    <input value="@itemShortName" type="text" class="form-control" id="shortname" @onchange="@((ui) => { itemShortName = (string)ui.Value;})" />
                </div>
            </div>
            <div class="modal-footer">
                <button @onclick="Save" class="btn btn-success">Update</button>
                <button @onclick="ModalInstance.CancelAsync" class="btn btn-secondary">Cancel</button>
            </div>
        </div>
    </div>
</div>



@code {

    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Parameter] public int id { get; set; }
    [Parameter] public string title { get; set; }
    [Parameter] public string message { get; set; }
    [Parameter] public string type { get; set; }
    [Parameter] public bool protectedName { get; set; }


    private ServiceResponse serviceResponse = new();
    private string? itemName;
    private string? itemShortName;

    protected override async void OnInitialized()
    {
        switch (type)
        {
            case "ResourceEnvironment":
                serviceResponse = await ResourceEnvironmentService.GetItem(id);
                ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                itemName = resourceEnvironment.Name;
                itemShortName = resourceEnvironment.ShortName;
                break;
            case "ResourceLocation":
                serviceResponse = await ResourceLocationService.GetItem(id);
                ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                itemName = resourceLocation.Name;
                itemShortName = resourceLocation.ShortName;
                break;
            case "ResourceOrg":
                serviceResponse = await ResourceOrgService.GetItem(id);
                ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                itemName = resourceOrg.Name;
                itemShortName = resourceOrg.ShortName;
                break;
            case "ResourceProjAppSvc":
                serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                itemName = resourceProjAppSvc.Name;
                itemShortName = resourceProjAppSvc.ShortName;
                break;
            case "ResourceType":
                serviceResponse = await ResourceTypeService.GetItem(id);
                ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                itemName = resourceType.Resource;
                itemShortName = resourceType.ShortName;
                break;
            case "ResourceUnitDept":
                serviceResponse = await ResourceUnitDeptService.GetItem(id);
                ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                itemName = resourceUnitDept.Name;
                itemShortName = resourceUnitDept.ShortName;
                break;
            case "ResourceVmRole":
                serviceResponse = await ResourceVmRoleService.GetItem(id);
                ResourceVmRole resourceVmRole = (ResourceVmRole)serviceResponse.ResponseObject;
                itemName = resourceVmRole.Name;
                itemShortName = resourceVmRole.ShortName;
                break;
        }
    }

    async void Save()
    {
        if ((itemName != "") && (itemShortName != ""))
        {
            if (GeneralHelper.ValidateShortName(itemShortName, type))
            {
                switch (type)
                {
                    case "ResourceEnvironment":
                        serviceResponse = await ResourceEnvironmentService.GetItem(id);
                        ResourceEnvironment resourceEnvironment = (ResourceEnvironment)serviceResponse.ResponseObject;
                        resourceEnvironment.Name = itemName;
                        resourceEnvironment.ShortName = itemShortName;
                        serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                        break;
                    case "ResourceLocation":
                        serviceResponse = await ResourceLocationService.GetItem(id);
                        ResourceLocation resourceLocation = (ResourceLocation)serviceResponse.ResponseObject;
                        resourceLocation.ShortName = itemShortName;
                        serviceResponse = await ResourceLocationService.PostItem(resourceLocation);
                        break;
                    case "ResourceOrg":
                        serviceResponse = await ResourceOrgService.GetItem(id);
                        ResourceOrg resourceOrg = (ResourceOrg)serviceResponse.ResponseObject;
                        resourceOrg.Name = itemName;
                        resourceOrg.ShortName = itemShortName;
                        serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                        break;
                    case "ResourceProjAppSvc":
                        serviceResponse = await ResourceProjAppSvcService.GetItem(id);
                        ResourceProjAppSvc resourceProjAppSvc = (ResourceProjAppSvc)serviceResponse.ResponseObject;
                        resourceProjAppSvc.Name = itemName;
                        resourceProjAppSvc.ShortName = itemShortName;
                        serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                        break;
                    case "ResourceType":
                        serviceResponse = await ResourceTypeService.GetItem(id);
                        ResourceType resourceType = (ResourceType)serviceResponse.ResponseObject;
                        resourceType.ShortName = itemShortName;
                        serviceResponse = await ResourceTypeService.PostItem(resourceType);
                        break;
                    case "ResourceUnitDept":
                        serviceResponse = await ResourceUnitDeptService.GetItem(id);
                        ResourceUnitDept resourceUnitDept = (ResourceUnitDept)serviceResponse.ResponseObject;
                        resourceUnitDept.Name = itemName;
                        resourceUnitDept.ShortName = itemShortName;
                        serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                        break;
                    case "ResourceVmRole":
                        serviceResponse = await ResourceVmRoleService.GetItem(id);
                        ResourceVmRole resourceVmRole = (ResourceVmRole)serviceResponse.ResponseObject;
                        resourceVmRole.Name = itemName;
                        resourceVmRole.ShortName = itemShortName;
                        serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                        break;
                }

                if (serviceResponse.Success)
                {
                    ModalInstance.CloseAsync();
                    toastService.ShowSuccess(type.Replace("Resource", "Resource ") + " updated!", "SUCCESS");
                }
                else
                {
                    toastService.ShowError("There was an error updating the " + type.Replace("Resource", "Resource ") + "!", "ERROR");
                }
            }
            else
            {
                toastService.ShowError("You must enter a valid short name!", "ERROR");
            }
        }
        else
        {
            toastService.ShowError("You must enter a name and short name!", "ERROR");
        }
    }

    async Task Cancel() => await ModalInstance.CancelAsync();
}