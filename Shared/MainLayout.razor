@using AzNamingTool.Helpers
@inherits LayoutComponentBase
@implements IDisposable
@inject StateContainer state
@inject IToastService toastService
@inject IJSRuntime JsRuntime
@using Blazored.Toast.Configuration

<PageTitle>Azure Naming Tool</PageTitle>
<BlazoredToasts Position="ToastPosition.BottomRight" ShowProgressBar="true" Timeout="3" />
<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4 auth">
                <button type="button" class="btn btn-success" @onclick="@(e => ShowAdminModal())" title="Admin">Admin</button>
                <button type="button" class="btn btn-danger" @onclick="@(e => MagicReset())" title="Magic reset">Magic Reset</button>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<button onclick="topFunction()" id="btnScrollToTop" class="btn btn-success btn-sm" title="Go to top">Top</button>
@if (PasswordModalOpen)
{
    <PasswordModal OnClose="@OnPasswordModalClose">
    </PasswordModal>
}

@code {
    
    [CascadingParameter] public IModalService Modal { get; set; }

    public bool PasswordModalOpen { get; set; }

    private string? message;

    protected override void OnInitialized()
    {
        GeneralHelper.VerifySecurity(state);
        // Check that the admin password is set
        if(!state.Password)
        {
            OpenPasswordModal();
        }
    }

    private void ChangePropertyValue()
    {
    }

    public void Dispose()
    {
        state.OnChange -= StateHasChanged;
    }

    private void OpenPasswordModal()
    {
        PasswordModalOpen = true;
        StateHasChanged();
    }

    private async Task OnPasswordModalClose(bool accepted)
    {
        PasswordModalOpen = false;
        StateHasChanged();
    }

    async void ShowAdminModal()
    {
        var parameters = new ModalParameters();

        var options = new ModalOptions()
            {
                HideCloseButton = false,
                UseCustomLayout = true
            };

        Modal.Show<AdminModal>("Admin", parameters, options);
    }

    private async void MagicReset()
    {
        bool confrimAPIKeyGenerate = await JsRuntime.InvokeAsync<bool>("confirm", "This will reset the site settings. Are you sure?");
        if (confrimAPIKeyGenerate)
        {

            var config = new ConfigurationBuilder()
                        .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                        .AddJsonFile("appsettings.json")
                        .Build()
                        .Get<Config>();

            config.SALTKey = "";
            config.AdminPassword = "";
            config.APIKey = "";

            GeneralHelper.UpdateSettings(config);
            GeneralHelper.ResetState(state);
            GeneralHelper.VerifySecurity(state);

            toastService.ShowSuccess("The site has been reset.", "MAGIC RESET ENABLED!");

            OpenPasswordModal();

            StateHasChanged();
        }
    }
}