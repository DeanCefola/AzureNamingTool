@page "/configuration"
@using AzNamingTool.Helpers
@using AzNamingTool.Models
@using AzNamingTool.Services
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared
@inject ILogger<Generate> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject IToastService toastService

<PageTitle>Azure Naming Tool - Configuration</PageTitle>
<div class="card bg-primary text-white mb-3">
    <div class="card-body"><h2>Configuration</h2></div>
</div>
<div class="card-body">
    <div class="mb-3" style="float:left">This component displays the current Azure Naming Tool configuration.</div>

    <Admin OnAdminChange="AdminChanged" />

    @if (!dataLoaded)
    {
        <div class="spinner-border blue" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <form>
            <div class="mb-3">
                @if (servicesData != null)
                {
                    <h4>Base Configuration</h4>

                    <div class="card">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="link-light text-decoration-none" data-toggle="collapse" href="#components" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                Components
                            </a>
                        </h5>
                        <div class="collapse card card-body" id="components">
                            <div class="card">
                                <div class="card card-header bg-default" style="font-weight:bold;">
                                    Current Components
                                </div>
                                <div class="card card-body">
                                    <p>The current Components.</p>
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                @if (admin)
                                                {
                                                    <th>Actions</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in @servicesData.ResourceComponents)
                                            {
                                                <tr>
                                                    <td>@item.Name</td>
                                                    @if (admin)
                                                    {
                                                        <td>
                                                            @if (item.Enabled)
                                                            {
                                                                <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceComponent",item.Id,"up"))" title="Move up">
                                                                    <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                </button>
                                                                <span> </span>
                                                                <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceComponent",item.Id,"down"))" title="Move down">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                </button>
                                                                <span> </span>
                                                                <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceComponent",item.Id,"disable"))" title="Disable">
                                                                    <span class="oi oi-x" aria-hidden="true"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceComponent",item.Id,"enable"))" title="Enable">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span>
                                                                </button>
                                                            }
                                                        </td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            @if (admin)
                            {
                                <div class="card">
                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                        Configuration
                                    </div>
                                    <div class="card card-body">
                                        <div class="card  w-auto">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Export the current Resource Components Configuration
                                            </div>
                                            <div class="card card-body">
                                                <p>
                                                    Click <strong>Export</strong> to export the current Resource Components Configuration.
                                                </p>
                                                <p>
                                                    <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceComponent",0,"download")) title="Export">
                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                    </button>
                                                </p>
                                            </div>
                                        </div>
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Import Components Configuration
                                            </div>
                                            <div class="card card-body">
                                                <p>
                                                    Enter the new Components Configuration JSON below and click <strong>Import</strong> to import the Components Configuration. <strong>NOTE:</strong> This will overwrite the existing Components Configuration.
                                                </p>
                                                <p>
                                                    <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                </p>
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceComponent",0,"update"))" title="Import">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                    </button>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                }

                @if (servicesData.ResourceDelimiters != null)
                {
                    <div class="card">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="link-light text-decoration-none" data-toggle="collapse" href="#delimiters" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                Delimiters
                            </a>
                        </h5>
                        <div class="collapse card card-body" id="delimiters">
                            <div class="card">
                                <div class="card card-header bg-default" style="font-weight:bold;">
                                    Current Delimiters
                                </div>
                                <div class="card card-body">
                                    <p>The current Delimiters.</p>
                                    <table class="table table-striped">
                                        <thead>
                                            <tr>
                                                <th>Name</th>
                                                <th>Delimiter</th>
                                                @if (admin)
                                                {
                                                    <th>Actions</th>
                                                }
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var item in @servicesData.ResourceDelimiters)
                                            {
                                                <tr>
                                                    <td>@item.Name</td>
                                                    <td>@item.Delimiter</td>
                                                    @if (admin)
                                                    {
                                                        <td>
                                                            @if (item.Enabled)
                                                            {
                                                                <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceDelimiter",item.Id,"disable"))" title="Disable">
                                                                    <span class="oi oi-x" aria-hidden="true"></span>
                                                                </button>
                                                            }
                                                            else
                                                            {
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceDelimiter",item.Id,"enable"))" title="Enable">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span>
                                                                </button>
                                                            }
                                                        </td>
                                                    }
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                            @if (admin)
                            {
                                <div class="card">
                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                        Configuration
                                    </div>
                                    <div class="card card-body">
                                        <div class="card  w-auto">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Export the current Resource Delimiters Configuration
                                            </div>
                                            <div class="card card-body">
                                                <p>
                                                    Click <strong>Export</strong> to export the current Resource Delimiters Configuration.
                                                </p>
                                                <p>
                                                    <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceDelimiter",0,"download")) title="Export">
                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                    </button>
                                                </p>
                                            </div>
                                        </div>
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Import Delimiters Configuration
                                            </div>
                                            <div class="card card-body">
                                                <p>
                                                    Enter the new Resource Delimiters Configuration JSON below and click <strong>Import</strong> to import the Resource Delimiters Configuration. <strong>NOTE:</strong> This will overwrite the existing Resource Delimiters Configuration.
                                                </p>
                                                <p>
                                                    <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                </p>
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceDelimiter",0,"update"))" title="Import">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                    </button>
                                                </p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>

            <div class="mb-3">
                <h4>Component Configuration</h4>
                @foreach (ResourceComponent resourceComponent in servicesData.ResourceComponents.OrderBy(x => x.Name))
                {
                    switch (resourceComponent.Name)
                    {
                        case "ResourceEnvironment":
                            @if (servicesData.ResourceEnvironments != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#environments" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Environments
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="environments">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Environments
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Environments.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                            @if (admin)
                                                            {
                                                                <th>Actions</th>
                                                            }
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceEnvironments)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                                @if (admin)
                                                                {
                                                                    <td>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"up"))" title="Move up">
                                                                            <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"down"))" title="Move down">
                                                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    </td>
                                                                }
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New Environment
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new Environment.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceEnvironment",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export the current Environments Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Environments Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceEnvironment",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Orgs Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Environments Configuration JSON below and click <strong>Import</strong> to import the Environments Configuration. <strong>NOTE:</strong> This will overwrite the existing Environments Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceEnvironment",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceLocation":
                            @if (servicesData.ResourceLocations != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#locations" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Locations
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="locations">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Locations
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Locations.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceLocations)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New Location
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new Location.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceLocation",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export the current Locations Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Locations Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceLocation",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Orgs Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Locations Configuration JSON below and click <strong>Import</strong> to import the Locations Configuration. <strong>NOTE:</strong> This will overwrite the existing Locations Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceLocation",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceOrg":
                            @if (servicesData.ResourceOrgs != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#orgs" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Orgs
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="orgs">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Orgs
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Orgs.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                            @if (admin)
                                                            {
                                                                <th>Actions</th>
                                                            }
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceOrgs)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                                @if (admin)
                                                                {
                                                                    <td>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceOrg",item.Id,"up"))" title="Move up">
                                                                            <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceOrg",item.Id,"down"))" title="Move down">
                                                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceOrg",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    </td>
                                                                }
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New Org
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new Org.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceOrg",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export the current Orgs Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Orgs Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceOrg",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Orgs Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Orgs Configuration JSON below and click <strong>Import</strong> to import the Orgs Configuration. <strong>NOTE:</strong> This will overwrite the existing Orgs Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceOrg",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceProjAppSvc":
                            @if (servicesData.ResourceProjAppSvcs != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#projsappssvcs" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Projects/Apps/Services
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="projsappssvcs">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Projects/Apps/Services
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Projects/Apps/Services.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                            @if (admin)
                                                            {
                                                                <th>Actions</th>
                                                            }
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceProjAppSvcs)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                                @if (admin)
                                                                {
                                                                    <td>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"up"))" title="Move up">
                                                                            <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"down"))" title="Move down">
                                                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    </td>
                                                                }
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New Project/App/Service
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new Project/App/Service.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceProjAppSvc",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export the current Projects/Apps/Services Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Projects/Apps/Services Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceProjAppSvc",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Projects/Apps/Services Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Projects/Apps/Services Configuration JSON below and click <strong>Import</strong> to import the Projects/Apps/Services Configuration. <strong>NOTE:</strong> This will overwrite the existing Projects/Apps/Services Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceProjAppSvc",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceType":
                            @if (servicesData.ResourceTypes != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#types" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Resource Types
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="types">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Resource Types
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Resource Types.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceTypes)
                                                        {
                                                            <tr>
                                                                <td>@item.Resource</td>
                                                                <td>@item.ShortName</td>
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export the current Resource Types Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Resource Types Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceType",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Resource Types Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Resource Types Configuration JSON below and click <strong>Import</strong> to import the Resource Types Configuration. <strong>NOTE:</strong> This will overwrite the existing Resource Types Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceType",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceUnitDept":
                            @if (servicesData.ResourceUnitDepts != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#unitsdepts" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                            Units/Depts
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="unitsdepts">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current Units/Depts
                                            </div>
                                            <div class="card card-body">
                                                <p>The current Units/Depts.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                            @if (admin)
                                                            {
                                                                <th>Actions</th>
                                                            }
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceUnitDepts)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                                @if (admin)
                                                                {
                                                                    <td>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"up"))" title="Move up">
                                                                            <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"down"))" title="Move down">
                                                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    </td>
                                                                }
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New Unit/Dept
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new Unit/Dept.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceUnitDept",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export Units/Depts Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current Units/Depts Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceUnitDept",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import Units/Depts Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new Units/Depts Configuration JSON below and click <strong>Import</strong> to import the Units/Depts Configuration. <strong>NOTE:</strong> This will overwrite the existing Units/Depts Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceUnitDept",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                        case "ResourceVmRole":
                            @if (servicesData.ResourceVmRoles != null)
                            {
                                <div class="card">
                                    <h5 class="card-header text-white bg-secondary text-white">
                                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#vmroles" role="button" aria-expanded="false" aria-controls="vmroles">
                                            VM Roles
                                        </a>
                                    </h5>
                                    <div class="collapse card card-body" id="vmroles">
                                        <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                                Current VM Roles
                                            </div>
                                            <div class="card card-body">
                                                <p>The current VM Roles.</p>
                                                <table class="table table-striped">
                                                    <thead>
                                                        <tr>
                                                            <th>Name</th>
                                                            <th>Short Name</th>
                                                            @if (admin)
                                                            {
                                                                <th>Actions</th>
                                                            }
                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @foreach (var item in @servicesData.ResourceVmRoles)
                                                        {
                                                            <tr>
                                                                <td>@item.Name</td>
                                                                <td>@item.ShortName</td>
                                                                @if (admin)
                                                                {
                                                                    <td>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"up"))" title="Move up">
                                                                            <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"down"))" title="Move down">
                                                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                        </button>
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    </td>
                                                                }
                                                            </tr>
                                                        }
                                                    </tbody>
                                                </table>
                                            </div>
                                        </div>
                                        @if (admin)
                                        {
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    New VM Role
                                                </div>
                                                <div class="card card-body">
                                                    <p>Add a new VM Role.</p>
                                                    <table class="table table-striped">
                                                        <tbody>
                                                            <tr>
                                                                <td>Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("name",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td>Short Name</td>
                                                                <td>
                                                                    <input class="form-control" type="text" @onchange="@((ui) => { SetFormValue("shortName",(string)ui.Value);})" />
                                                                </td>
                                                            </tr>
                                                            <tr>
                                                                <td colspan="2">
                                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceVmRole",0,"add"))" title="Add">
                                                                        <span class="oi oi-plus" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            </tr>
                                                        </tbody>
                                                    </table>
                                                </div>
                                            </div>
                                            <div class="card">
                                                <div class="card card-header bg-default" style="font-weight:bold;">
                                                    Configuration
                                                </div>
                                                <div class="card card-body">
                                                    <div class="card  w-auto">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Export VM Role Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Click <strong>Export</strong> to export the current VM Role Configuration.
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceVmRole",0,"download")) title="Export">
                                                                    <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                    <div class="card">
                                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                                            Import VM Role Configuration
                                                        </div>
                                                        <div class="card card-body">
                                                            <p>
                                                                Enter the new VM Roles Configuration JSON below and click <strong>Import</strong> to import the VM Roles Configuration. <strong>NOTE:</strong> This will overwrite the existing VM Roles Configuration.
                                                            </p>
                                                            <p>
                                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                                            </p>
                                                            <p>
                                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceVmRole",0,"update"))" title="Import">
                                                                    <span class="oi oi-plus" aria-hidden="true"></span> Import
                                                                </button>
                                                            </p>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            }
                            break;
                    }
                }
            </div>
            @if (admin)
            {
                <div>
                    <h4>General Configuration</h4>
                    <div class="card">
                        <h5 class="card-header text-white bg-secondary text-white">
                            <a class="link-light text-decoration-none" data-toggle="collapse" href="#master" role="button" aria-expanded="false" aria-controls="master">
                                Master Configuration
                            </a>
                        </h5>
                        <div class="collapse card card-body" id="master">
                            <div class="card w-auto">
                                <div class="card card-header bg-default" style="font-weight:bold;">
                                    Export the current Master Configuration
                                </div>
                                <div class="card card-body">
                                    <p>
                                        Click <strong>Export</strong> to export the current Master Configuration. This includes all component, settings, and admin passwords/API keys.
                                    </p>
                                    <p>
                                        <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("Master",0,"download")) title="Export">
                                            <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Export
                                        </button>
                                    </p>
                                </div>
                            </div>
                            <div class="card">
                                <div class="card card-header bg-default" style="font-weight:bold;">
                                    Import Master Configuration
                                </div>
                                <div class="card card-body">
                                    <p>
                                        Enter the new Master Configuration JSON below and click <strong>Import</strong> to import the Master Configuration. <strong>NOTE:</strong> This will overwrite all existing Configurations.
                                    </p>
                                    <p>
                                        <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("configjson",(string)ui.Value);})" />
                                    </p>
                                    <p>
                                        <button type="button" class="btn btn-success" @onclick="@(e => FormAction("Master",0,"update"))" title="Import">
                                            <span class="oi oi-plus" aria-hidden="true"></span> Import
                                        </button>
                                    </p>
                                </div>
                            </div>

                        </div>
                    </div>

                    @*<div class="card">
                        <h5 class="card-header text-white bg-secondary">
                        <a class="link-light text-decoration-none" data-toggle="collapse" href="#policy" role="button" aria-expanded="false" aria-controls="policy">
                        Policy
                        </a>
                        </h5>
                        <div class="collapse card card-body" id="policy">
                        <div>
                        <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("Policy",0,"download")) title="Download">
                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span> Download
                        </button>
                        </div>
                        </div>
                        </div>*@
                </div>
            }
        </form>
    }
</div>
<div class="toast">
    <div class="toast-header">
        Toast Header
    </div>
    <div class="toast-body">
        Some text inside the toast body
    </div>
</div>


@code {
    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    private ServicesData servicesData = new();
    private bool dataLoaded = false;
    private bool admin;
    private string? newItemName;
    private string? newItemShortName;
    private string? newItemConfig;
    private ResponseMessage message = new();

    protected override async Task OnInitializedAsync()
    {
        // Load the values form state
        admin = state.Admin;
        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
        dataLoaded = true;
    }

    private async Task AdminChanged()
    {
        admin = state.Admin;
        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
    }

    private async Task FormAction(string type, long id, string action)
    {
        message = new ResponseMessage();
        try
        {
            ServiceResponse serviceResponse;
            switch (type)
            {
                case "ResourceComponent":
                    ResourceComponent resourceComponent = new();
                    switch (action)
                    {
                        case "up":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            // Get the component in the list
                            if (resourceComponent.SortOrder > 1)
                            {
                                resourceComponent.SortOrder += -1;
                            }
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            if (resourceComponent.SortOrder <= servicesData.ResourceComponents.Count)
                            {
                                resourceComponent.SortOrder += 1;
                            }
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " move failed!";
                            }
                            break;
                        case "enable":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            resourceComponent.Enabled = true;
                            resourceComponent.SortOrder = servicesData.ResourceComponents.Count + 1;
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " enabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " enabling failed!";
                            }
                            break;
                        case "disable":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            resourceComponent.Enabled = false;
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " disabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " disabling failed!";
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceComponentService.GetItems(true);
                            var componentjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("componentsconfig.json", JsonSerializer.Serialize(componentjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceComponentService.PostConfig(JsonSerializer.Deserialize<List<ResourceComponent>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Components config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Components config update failed!";
                                }
                            }

                            break;
                    }
                    serviceResponse = await ResourceComponentService.GetItems(admin);
                    servicesData.ResourceComponents = (List<ResourceComponent>)serviceResponse.ResponseObject;
                    break;
                case "ResourceDelimiter":
                    ResourceDelimiter resourceDelimiter = new();
                    switch (action)
                    {
                        case "enable":
                            resourceDelimiter = servicesData.ResourceDelimiters.Find(x => x.Id == id);
                            resourceDelimiter.Enabled = true;
                            serviceResponse = await ResourceDelimiterService.PostItem(resourceDelimiter);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceDelimiter.Name + " enabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceDelimiter.Name + " enabling failed!";
                            }
                            break;
                        case "disable":
                            resourceDelimiter = servicesData.ResourceDelimiters.Find(x => x.Id == id);
                            resourceDelimiter.Enabled = false;
                            serviceResponse = await ResourceDelimiterService.PostItem(resourceDelimiter);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceDelimiter.Name + " disabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceDelimiter.Name + " disabling failed!";
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceDelimiterService.GetItems(admin);
                            var delimiterjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("delimitersconfig.json", JsonSerializer.Serialize(delimiterjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceDelimiterService.PostConfig(JsonSerializer.Deserialize<List<ResourceDelimiter>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Delimiters config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Delimiters config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceDelimiterService.GetItems(admin);
                    servicesData.ResourceDelimiters = (List<ResourceDelimiter>)serviceResponse.ResponseObject;
                    break;
                case "ResourceEnvironment":
                    ResourceEnvironment resourceEnvironment;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                            if (resourceEnvironment.SortOrder > 1)
                            {
                                resourceEnvironment.SortOrder += -1;
                            }
                            serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceEnvironment.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceEnvironment.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                            if (resourceEnvironment.SortOrder <= servicesData.ResourceEnvironments.Count)
                            {
                                resourceEnvironment.SortOrder += 1;
                            }
                            serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceEnvironment.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceEnvironment.Name + " move failed!";
                            }
                            break;
                        case "delete":
                            bool confirmEnvironmentDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirmEnvironmentDelete)
                            {
                                resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                                serviceResponse = await ResourceEnvironmentService.DeleteItem(Convert.ToInt32(resourceEnvironment.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceEnvironment.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceEnvironment.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            if ((newItemName != null) && (newItemShortName != null))
                            {
                                // Add the new item
                                resourceEnvironment = new ResourceEnvironment()
                                    {
                                        Name = newItemName,
                                        ShortName = newItemShortName
                                    };

                                serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceEnvironment.Name + " added!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceEnvironment.Name + " addition failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceEnvironmentService.GetItems();
                            var environmentjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("environmentsconfig.json", JsonSerializer.Serialize(environmentjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceEnvironmentService.PostConfig(JsonSerializer.Deserialize<List<ResourceEnvironment>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Environments config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Environments config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceEnvironmentService.GetItems();
                    servicesData.ResourceEnvironments = (List<ResourceEnvironment>)serviceResponse.ResponseObject;
                    break;
                case "ResourceLocation":
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await ResourceLocationService.GetItems();
                            var locationjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("locationsconfig.json", JsonSerializer.Serialize(locationjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceLocationService.PostConfig(JsonSerializer.Deserialize<List<ResourceLocation>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Locations config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Locations config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceLocationService.GetItems();
                    servicesData.ResourceLocations = (List<ResourceLocation>)serviceResponse.ResponseObject;
                    break;
                    break;
                case "ResourceOrg":
                    ResourceOrg resourceOrg;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                            if (resourceOrg.SortOrder > 1)
                            {
                                resourceOrg.SortOrder += -1;
                            }
                            serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceOrg.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceOrg.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                            if (resourceOrg.SortOrder <= servicesData.ResourceOrgs.Count)
                            {
                                resourceOrg.SortOrder += 1;
                            }
                            serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceOrg.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceOrg.Name + " move failed!";
                            }
                            break;
                        case "delete":
                            bool confirmOrgDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirmOrgDelete)
                            {
                                resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                                serviceResponse = await ResourceOrgService.DeleteItem(Convert.ToInt32(resourceOrg.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceOrg.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceOrg.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            if ((newItemName != null) && (newItemShortName != null))
                            {
                                // Add the new item
                                resourceOrg = new ResourceOrg()
                                    {
                                        Name = newItemName,
                                        ShortName = newItemShortName
                                    };

                                serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceOrg.Name + " added!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceOrg.Name + " addition failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceOrgService.GetItems();
                            var orgjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("orgsconfig.json", JsonSerializer.Serialize(orgjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceOrgService.PostConfig(JsonSerializer.Deserialize<List<ResourceOrg>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Orgs config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Orgs config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceOrgService.GetItems();
                    servicesData.ResourceOrgs = (List<ResourceOrg>)serviceResponse.ResponseObject;
                    break;
                case "ResourceProjAppSvc":
                    ResourceProjAppSvc resourceProjAppSvc;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                            if (resourceProjAppSvc.SortOrder > 1)
                            {
                                resourceProjAppSvc.SortOrder += -1;
                            }
                            serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceProjAppSvc.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceProjAppSvc.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                            if (resourceProjAppSvc.SortOrder <= servicesData.ResourceProjAppSvcs.Count)
                            {
                                resourceProjAppSvc.SortOrder += 1;
                            }
                            serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceProjAppSvc.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceProjAppSvc.Name + " move failed!";
                            }
                            break;
                        case "delete":
                            bool coinfirmProjAppSvcDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (coinfirmProjAppSvcDelete)
                            {
                                resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                                serviceResponse = await ResourceProjAppSvcService.DeleteItem(Convert.ToInt32(resourceProjAppSvc.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceProjAppSvc.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceProjAppSvc.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            if ((newItemName != null) && (newItemShortName != null))
                            {
                                // Add the new item
                                resourceProjAppSvc = new ResourceProjAppSvc()
                                    {
                                        Name = newItemName,
                                        ShortName = newItemShortName
                                    };

                                serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceProjAppSvc.Name + " added!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceProjAppSvc.Name + " addition failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceProjAppSvcService.GetItems();
                            var projappsvcjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("projappsvcsconfig.json", JsonSerializer.Serialize(projappsvcjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceProjAppSvcService.PostConfig(JsonSerializer.Deserialize<List<ResourceProjAppSvc>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource ProjAppSvcs config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource ProjAppSvcs config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceProjAppSvcService.GetItems();
                    servicesData.ResourceProjAppSvcs = (List<ResourceProjAppSvc>)serviceResponse.ResponseObject;
                    break;
                case "ResourceType":
                    ResourceType resourceType = new();
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await ResourceTypeService.GetItems();
                            var typejson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("typesconfig.json", JsonSerializer.Serialize(typejson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceTypeService.PostConfig(JsonSerializer.Deserialize<List<ResourceType>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Types config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Types config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceTypeService.GetItems();
                    servicesData.ResourceTypes = (List<ResourceType>)serviceResponse.ResponseObject;
                    break;
                case "ResourceUnitDept":
                    ResourceUnitDept resourceUnitDept;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                            if (resourceUnitDept.SortOrder > 1)
                            {
                                resourceUnitDept.SortOrder += -1;
                            }
                            serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceUnitDept.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceUnitDept.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                            if (resourceUnitDept.SortOrder <= servicesData.ResourceUnitDepts.Count)
                            {
                                resourceUnitDept.SortOrder += 1;
                            }
                            serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceUnitDept.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceUnitDept.Name + " move failed!";
                            }
                            break;
                        case "delete":
                            bool confirmUnitDeptDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirmUnitDeptDelete)
                            {
                                resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                                serviceResponse = await ResourceUnitDeptService.DeleteItem(Convert.ToInt32(resourceUnitDept.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceUnitDept.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceUnitDept.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            if ((newItemName != null) && (newItemShortName != null))
                            {
                                // Add the new item
                                resourceUnitDept = new ResourceUnitDept()
                                    {
                                        Name = newItemName,
                                        ShortName = newItemShortName
                                    };

                                serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceUnitDept.Name + " added!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceUnitDept.Name + " addition failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceUnitDeptService.GetItems();
                            var unitdeptjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("unitdeptsconfig.json", JsonSerializer.Serialize(unitdeptjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceUnitDeptService.PostConfig(JsonSerializer.Deserialize<List<ResourceUnitDept>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource UnitDepts config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource UnitDepts config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceUnitDeptService.GetItems();
                    servicesData.ResourceUnitDepts = (List<ResourceUnitDept>)serviceResponse.ResponseObject;
                    break;
                case "ResourceVmRole":
                    ResourceVmRole resourceVmRole;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                            if (resourceVmRole.SortOrder > 1)
                            {
                                resourceVmRole.SortOrder += -1;
                            }
                            serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceVmRole.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceVmRole.Name + " move failed!";
                            }

                            break;
                        case "down":
                            resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                            if (resourceVmRole.SortOrder <= servicesData.ResourceOrgs.Count)
                            {
                                resourceVmRole.SortOrder += 1;
                            }
                            serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceVmRole.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceVmRole.Name + " move failed!";
                            }
                            break;
                        case "delete":
                            bool confirmOrgDelete = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirmOrgDelete)
                            {
                                resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                                serviceResponse = await ResourceVmRoleService.DeleteItem(Convert.ToInt32(resourceVmRole.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceVmRole.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceVmRole.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            if ((newItemName != null) && (newItemShortName != null))
                            {
                                // Add the new item
                                resourceVmRole = new ResourceVmRole()
                                    {
                                        Name = newItemName,
                                        ShortName = newItemShortName
                                    };
                                serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceVmRole.Name + " added!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceVmRole.Name + " addition failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceVmRoleService.GetItems();
                            var vmroleson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("vmrolesconfig.json", JsonSerializer.Serialize(vmroleson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ResourceVmRoleService.PostConfig(JsonSerializer.Deserialize<List<ResourceVmRole>>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Resource Vm Roles config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Resource Vm Roles config update failed!";
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceVmRoleService.GetItems();
                    servicesData.ResourceVmRoles = (List<ResourceVmRole>)serviceResponse.ResponseObject;
                    break;
                case "Master":
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await ImportExportService.ExportConfig();
                            var masterjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("masterconfig.json", JsonSerializer.Serialize(masterjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newItemConfig != null)
                            {
                                serviceResponse = await ImportExportService.PostConfig(JsonSerializer.Deserialize<ConfigurationData>(newItemConfig));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Master config update succeeded!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Master config update failed!";
                                }
                            }
                            break;
                    }
                    break;
                case "Policy":
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await PolicyService.GetPolicy();
                            var policyjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("namePolicyDefinition.json", JsonSerializer.Serialize(policyjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                    }
                    break;
            }

            servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);

            // Reset the new item variables
            newItemName = null;
            newItemShortName = null;
            newItemConfig = null;
        }
        catch (Exception ex)
        {
            message.Type = MessageTypesEnum.ERROR;
            message.Message = "There was a problem with the request.";
        }


        if (message.Message != null)
        {
            switch (message.Type)
            {
                case MessageTypesEnum.INFORMATION:
                    toastService.ShowInfo(message.Message, "INFORMATION");
                    break;
                case MessageTypesEnum.SUCCESS:
                    toastService.ShowSuccess(message.Message, "SUCCESS");
                    break;
                case MessageTypesEnum.WARNING:
                    toastService.ShowWarning(message.Message, "WARNING");
                    break;
                case MessageTypesEnum.ERROR:
                    toastService.ShowError(message.Message, "ERROR");
                    break;
            }
        }
    }

    private void SetFormValue(string type, string value)
    {
        switch (type)
        {
            case "name":
                newItemName = value;
                break;
            case "shortName":
                newItemShortName = value;
                break;
            case "configjson":
                newItemConfig = value;
                break;
        }
    }
}
