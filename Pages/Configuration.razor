@page "/configuration"
@using AzNamingTool.Helpers
@using AzNamingTool.Models
@using AzNamingTool.Services
@using System.IO
@using BlazorDownloadFile
@using Microsoft.AspNetCore.Components.Authorization
@using System.Text.Json
@using System.Text.Json.Serialization
@using Shared
@using System.Text
@inject ILogger<Generate> Logger
@inject IJSRuntime JsRuntime
@inject IConfiguration _config
@inject StateContainer state
@inject IToastService toastService
@implements IDisposable

<PageTitle>Azure Naming Tool - Configuration</PageTitle>
<div class="card bg-primary text-white mb-3">
    <div class="card-body"><h2>Configuration</h2></div>
</div>
<div class="card-body">
    <div class="mb-3">This component displays the current Azure Naming Tool configuration.</div>

    @if (!dataLoaded)
    {
        <div class="spinner-border blue" role="status">
            <span class="sr-only"></span>
        </div>
    }
    else
    {
        <div class="mb-3">
            @if (servicesData != null)
            {
                <h4>Base Configuration</h4>

                <div class="card">
                    <h5 class="card-header text-white bg-secondary text-white">
                        <a id="ResourceComponent" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#components" role="button" aria-expanded="false" aria-controls="components">
                            Components
                        </a>
                    </h5>
                    <div class="collapse card card-body" id="components">
                        <div class="card">
                            <div class="card card-header bg-default" style="font-weight:bold;">
                                Current Components
                            </div>
                            <div class="card card-body">
                                <p>The current Components.</p>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            @if (admin)
                                            {
                                                <th>Actions</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in @servicesData.ResourceComponents)
                                        {
                                            <tr>
                                                <td>@item.DisplayName</td>
                                                @if (admin)
                                                {
                                                    <td>
                                                        @if (item.Enabled)
                                                        {
                                                            <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceComponent",item.Id,"up"))" title="Move up">
                                                                <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                            </button>
                                                            <span> </span>
                                                            <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceComponent",item.Id,"down"))" title="Move down">
                                                                <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                            </button>
                                                            <span> </span>
                                                            <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceComponent",item.Id,"disable"))" title="Disable">
                                                                <span class="oi oi-x" aria-hidden="true"></span>
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceComponent",item.Id,"enable"))" title="Enable">
                                                                <span class="oi oi-plus" aria-hidden="true"></span>
                                                            </button>
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        @if (admin)
                        {
                            <div class="card">
                                <div class="card-header bg-default">
                                    <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#componentsconfig" role="button" aria-expanded="false" aria-controls="componentsconfig">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                    </a>
                                </div>
                                <div class="collapse card card-body" id="componentsconfig">
                                    <div class="card  w-auto">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Export the current Components Configuration
                                        </div>
                                        <div class="card card-body">
                                            <p>
                                                Click <strong>Export</strong> to export the current Components Configuration.
                                            </p>
                                            <p>
                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceComponent",0,"download")) title="Export">
                                                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                </button>
                                            </p>
                                        </div>
                                    </div>
                                    <div class="card  w-auto">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Reset the Components Configuration
                                        </div>
                                        <div class="card card-body">
                                            <p>
                                                Click <strong>Reset</strong> to reset the Components Configuration back to the default values at the time of installation.
                                            </p>
                                            <p>
                                                <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                            </p>
                                            <p>
                                                <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceComponent",0,"reset")) title="Reset">
                                                    <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                </button>
                                            </p>
                                        </div>
                                    </div>
                                    <!--<div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Import Components Configuration
                                        </div>
                                        <div class="card card-body">
                                            <p>
                                                Enter the new Components Configuration JSON below and click <strong>Import</strong> to import the Components Configuration. <strong>NOTE:</strong> This will overwrite the existing Components Configuration.
                                            </p>
                                            <p>
                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newComponentConfig",(string)ui.Value);})">@newComponentConfig</textarea>
                                            </p>
                                            <p>
                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceComponent",0,"update"))" title="Import">
                                                    <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                </button>
                                            </p>
                                        </div>
                                    </div>
                                    -->
                    </div>
                            </div>
                        }
                    </div>
                </div>

            }

            @if (servicesData.ResourceDelimiters != null)
            {
                <div class="card">
                    <h5 class="card-header text-white bg-secondary text-white">
                        <a id="ResourceDelimiter" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#delimiters" role="button" aria-expanded="false" aria-controls="delimiters">
                            Delimiters
                        </a>
                    </h5>
                    <div class="collapse card card-body" id="delimiters">
                        <div class="card">
                            <div class="card card-header bg-default" style="font-weight:bold;">
                                Current Delimiters
                            </div>
                            <div class="card card-body">
                                <p>The current Delimiters.</p>
                                <table class="table table-striped">
                                    <thead>
                                        <tr>
                                            <th>Name</th>
                                            <th>Delimiter</th>
                                            @if (admin)
                                            {
                                                <th>Actions</th>
                                            }
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in @servicesData.ResourceDelimiters)
                                        {
                                            <tr style="height:55px;">
                                                <td>@item.Name</td>
                                                <td>@item.Delimiter</td>
                                                @if (admin)
                                                {
                                                    <td>
                                                        @if (item.Enabled)
                                                        {
                                                            @* <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceDelimiter",item.Id,"disable"))" title="Disable">
                                                                <span class="oi oi-x" aria-hidden="true"></span>
                                                                </button>*@
                                                        }
                                                        else
                                                        {
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceDelimiter",item.Id,"enable"))" title="Enable">
                                                                <span class="oi oi-plus" aria-hidden="true"></span>
                                                            </button>
                                                        }
                                                    </td>
                                                }
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        @if (admin)
                        {
                            <div class="card">
                                <div class="card-header bg-default">
                                    <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#delimitersconfig" role="button" aria-expanded="false" aria-controls="delimitersconfig">
                                        <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                    </a>
                                </div>
                                <div class="collapse card card-body" id="delimitersconfig">
                                    <div class="card  w-auto">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Export the current Delimiters Configuration
                                        </div>
                                        <div class="card card-body">
                                            <p>
                                                Click <strong>Export</strong> to export the current Delimiters Configuration.
                                            </p>
                                            <p>
                                                <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceDelimiter",0,"download")) title="Export">
                                                    <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                </button>
                                            </p>
                                        </div>
                                    </div>
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Import Delimiters Configuration
                                        </div>
                                        <div class="card card-body">
                                            <p>
                                                Enter the new Delimiters Configuration JSON below and click <strong>Import</strong> to import the Delimiters Configuration. <strong>NOTE:</strong> This will overwrite the existing Resource Delimiters Configuration.
                                            </p>
                                            <p>
                                                <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newDelimiterConfig",(string)ui.Value);})">@newDelimiterConfig</textarea>
                                            </p>
                                            <p>
                                                <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceDelimiter",0,"update"))" title="Import">
                                                    <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                </button>
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="mb-3">
            <h4>Component Configuration</h4>
            @foreach (ResourceComponent resourceComponent in servicesData.ResourceComponents.OrderBy(x => x.Name))
            {
                switch (resourceComponent.Name)
                {
                    case "ResourceEnvironment":
                        @if (servicesData.ResourceEnvironments != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#environments" role="button" aria-expanded="false" aria-controls="environments">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="environments">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Environments
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Environments.</p>
                                            @if (admin)
                                            {
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceEnvironment",0,"add"))" title="Add Environment">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Add Environment
                                                    </button>
                                                </p>
                                            }
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceEnvironments)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"up"))" title="Move up">
                                                                        <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"down"))" title="Move down">
                                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>
                                                                    @if (servicesData.ResourceEnvironments.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceEnvironment",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#environmentsconfig" role="button" aria-expanded="false" aria-controls="environmentsconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="environmentsconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export the current Environments Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Environments Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceEnvironment",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Environments Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the Environments Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceEnvironment",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Environments Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Environments Configuration JSON below and click <strong>Import</strong> to import the Environments Configuration. <strong>NOTE:</strong> This will overwrite the existing Environments Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newEnvironmentConfig",(string)ui.Value);})">@newEnvironmentConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceEnvironment",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceLocation":
                        @if (servicesData.ResourceLocations != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#locations" role="button" aria-expanded="false" aria-controls="locations">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="locations">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Locations
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Locations.</p>
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceLocations)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceLocation",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>
                                                                    @if (servicesData.ResourceLocations.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceLocation",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        @* <div class="card">
                                            <div class="card card-header bg-default" style="font-weight:bold;">
                                            New Location
                                            </div>
                                            <div class="card card-body">
                                            <p>Add a new Location.</p>
                                            <table class="table table-striped">
                                            <tbody>
                                            <tr>
                                            <td>Name</td>
                                            <td>
                                            <input class="form-control" type="text" value="@newLocationName" @onchange="@((ui) => { SetFormValue("newLocationName",(string)ui.Value);})" />
                                            </td>
                                            </tr>
                                            <tr>
                                            <td>Short Name</td>
                                            <td>
                                            <input class="form-control" type="text" value="@newLocationShortName" @onchange="@((ui) => { SetFormValue("newLocationShortName",(string)ui.Value);})" />
                                            </td>
                                            </tr>
                                            <tr>
                                            <td colspan="2">
                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceLocation",0,"add"))" title="Add">
                                            <span class="oi oi-plus" aria-hidden="true"></span>
                                            </button>
                                            </td>
                                            </tr>
                                            </tbody>
                                            </table>
                                            </div>
                                            </div>*@
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#locationsconfig" role="button" aria-expanded="false" aria-controls="locationsconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="locationsconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export the current Locations Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Locations Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceLocation",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Locations Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the Locations Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceLocation",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Locations Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Locations Configuration JSON below and click <strong>Import</strong> to import the Locations Configuration. <strong>NOTE:</strong> This will overwrite the existing Locations Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newLocationConfig",(string)ui.Value);})">@newLocationConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceLocation",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceOrg":
                        @if (servicesData.ResourceOrgs != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#orgs" role="button" aria-expanded="false" aria-controls="orgs">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="orgs">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Orgs
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Orgs.</p>
                                            @if (admin)
                                            {
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceOrg",0,"add"))" title="Add Org">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Add Org
                                                    </button>
                                                </p>
                                            }
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceOrgs)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceOrg",item.Id,"up"))" title="Move up">
                                                                        <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceOrg",item.Id,"down"))" title="Move down">
                                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceOrg",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>
                                                                    @if (servicesData.ResourceOrgs.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceOrg",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#orgsconfig" role="button" aria-expanded="false" aria-controls="orgsconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="orgsconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export the current Orgs Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Orgs Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceOrg",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Orgs Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the Orgs Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceOrg",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Orgs Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Orgs Configuration JSON below and click <strong>Import</strong> to import the Orgs Configuration.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will overwrite the existing Orgs Configuration and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newOrgConfig",(string)ui.Value);})">@newOrgConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceOrg",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceProjAppSvc":
                        @if (servicesData.ResourceProjAppSvcs != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#projsappssvcs" role="button" aria-expanded="false" aria-controls="projsappssvcs">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="projsappssvcs">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Projects/Apps/Services
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Projects/Apps/Services.</p>
                                            @if (admin)
                                            {
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceProjAppSvc",0,"add"))" title="Add Project/App/Service">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Add Project/App/Service
                                                    </button>
                                                </p>
                                            }
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceProjAppSvcs)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"up"))" title="Move up">
                                                                        <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"down"))" title="Move down">
                                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>
                                                                    @if (servicesData.ResourceProjAppSvcs.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceProjAppSvc",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#projappsvcsconfig" role="button" aria-expanded="false" aria-controls="projappsvcsconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="projappsvcsconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export the current Projects/Apps/Services Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Projects/Apps/Services Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceProjAppSvc",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Projects/Apps/Services Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the Project/App/Services Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceProjAppSvc",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Projects/Apps/Services Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Projects/Apps/Services Configuration JSON below and click <strong>Import</strong> to import the Projects/Apps/Services Configuration. <strong>NOTE:</strong> This will overwrite the existing Projects/Apps/Services Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newProjAppSvcConfig",(string)ui.Value);})">@newProjAppSvcConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceProjAppSvc",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceType":
                        @if (servicesData.ResourceTypes != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#types" role="button" aria-expanded="false" aria-controls="types">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="types">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Resource Types
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Resource Types.</p>
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Optional</th>
                                                            <th>Excluded</th>
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceTypes)
                                                    {
                                                        <tr>
                                                            <td>@item.Resource</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    @if (item.Optional != "")
                                                                    {
                                                                        @foreach (ResourceComponent component in @servicesData.ResourceComponents)
                                                                        {
                                                                            if (component.Name != "ResourceType")
                                                                            {
                                                                                @if (item.Optional.ToLower().Contains(component.Name.Replace("Resource", "").ToLower()))
                                                                                {
                                                                                    <div>@component.DisplayName</div>
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                </td>
                                                                <td>
                                                                    @if (item.Exclude != "")
                                                                    {
                                                                        @foreach (ResourceComponent component in @servicesData.ResourceComponents)
                                                                        {
                                                                            if (component.Name != "ResourceType")
                                                                            {
                                                                                @if (item.Exclude.ToLower().Contains(component.Name.Replace("Resource", "").ToLower()))
                                                                                {
                                                                                    <div>@component.DisplayName</div>
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                </td>
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceType",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#typesconfig" role="button" aria-expanded="false" aria-controls="typesconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="typesconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export the current Resource Types Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Resource Types Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceType",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Resource Types Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the Resource Types Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceType",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Resource Types Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Resource Types Configuration JSON below and click <strong>Import</strong> to import the Resource Types Configuration. <strong>NOTE:</strong> This will overwrite the existing Resource Types Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newTypeConfig",(string)ui.Value);})">@newTypeConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceType",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceUnitDept":
                        @if (servicesData.ResourceUnitDepts != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#unitsdepts" role="button" aria-expanded="false" aria-controls="unitsdepts">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="unitsdepts">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current Units/Depts
                                        </div>
                                        <div class="card card-body">
                                            <p>The current Units/Depts.</p>
                                            @if (admin)
                                            {
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceUnitDept",0,"add"))" title="Add Unit/Dept">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Add Unit/Dept
                                                    </button>
                                                </p>
                                            }
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceUnitDepts)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"up"))" title="Move up">
                                                                        <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"down"))" title="Move down">
                                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>

                                                                    @if (servicesData.ResourceUnitDepts.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceUnitDept",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#unitdeptsconfig" role="button" aria-expanded="false" aria-controls="unitdeptsconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="unitdeptsconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export Units/Depts Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current Units/Depts Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceUnitDept",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the Units/Depts Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the UnitsDepts Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceUnitDept",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import Units/Depts Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new Units/Depts Configuration JSON below and click <strong>Import</strong> to import the Units/Depts Configuration. <strong>NOTE:</strong> This will overwrite the existing Units/Depts Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newUnitDeptConfig",(string)ui.Value);})">@newUnitDeptConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceUnitDept",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                    case "ResourceVmRole":
                        @if (servicesData.ResourceVmRoles != null)
                        {
                            <div class="card">
                                <h5 class="card-header text-white bg-secondary text-white">
                                    <a id="@resourceComponent.Name" class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#vmroles" role="button" aria-expanded="false" aria-controls="vmroles">
                                        @resourceComponent.DisplayName
                                    </a>
                                </h5>
                                <div class="collapse card card-body" id="vmroles">
                                    <div class="card">
                                        <div class="card card-header bg-default" style="font-weight:bold;">
                                            Current VM Roles
                                        </div>
                                        <div class="card card-body">
                                            <p>The current VM Roles.</p>
                                            @if (admin)
                                            {
                                                <p>
                                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceVmRole",0,"add"))" title="Add VM Role">
                                                        <span class="oi oi-plus" aria-hidden="true"></span> Add VM Role
                                                    </button>
                                                </p>
                                            }
                                            <table class="table table-striped">
                                                <thead>
                                                    <tr>
                                                        <th>Name</th>
                                                        <th>Short Name</th>
                                                        @if (admin)
                                                        {
                                                            <th>Actions</th>
                                                        }
                                                    </tr>
                                                </thead>
                                                <tbody>
                                                    @foreach (var item in @servicesData.ResourceVmRoles)
                                                    {
                                                        <tr>
                                                            <td>@item.Name</td>
                                                            <td>@item.ShortName</td>
                                                            @if (admin)
                                                            {
                                                                <td>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"up"))" title="Move up">
                                                                        <span class="oi oi-arrow-thick-top" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"down"))" title="Move down">
                                                                        <span class="oi oi-arrow-thick-bottom" aria-hidden="true"></span>
                                                                    </button>
                                                                    <span> </span>
                                                                    <button type="button" class="btn btn-primary" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"edit"))" title="Edit">
                                                                        <span class="oi oi-pencil" aria-hidden="true"></span>
                                                                    </button>

                                                                    @if (servicesData.ResourceVmRoles.Count > 1)
                                                                    {
                                                                        <span> </span>
                                                                        <button type="button" class="btn btn-danger" @onclick="@(e => FormAction("ResourceVmRole",item.Id,"delete"))" title="Delete">
                                                                            <span class="oi oi-x" aria-hidden="true"></span>
                                                                        </button>
                                                                    }
                                                                </td>
                                                            }
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </div>
                                    </div>
                                    @if (admin)
                                    {
                                        <div class="card">
                                            <div class="card-header bg-default">
                                                <a class="text-decoration-none text-dark" data-toggle="collapse" style="display:block;font-weight:bold;" href="#vmrolesconfig" role="button" aria-expanded="false" aria-controls="vmrolesconfig">
                                                    <span class="oi oi-chevron-bottom" aria-hidden="true"></span> Configuration
                                                </a>
                                            </div>
                                            <div class="collapse card card-body" id="vmrolesconfig">
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Export VM Role Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Export</strong> to export the current VM Role Configuration.
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("ResourceVmRole",0,"download")) title="Export">
                                                                <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card  w-auto">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Reset the VM Roles Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Click <strong>Reset</strong> to reset the VM Roles Configuration back to the default values at the time of installation.
                                                        </p>
                                                        <p>
                                                            <strong>NOTE: This will reset your current confgiruation and cannot be undone!</strong>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-danger" @onclick=@(e => FormAction("ResourceVmRole",0,"reset")) title="Reset">
                                                                <span class="oi oi-loop-circular" aria-hidden="true"></span> Reset
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                                <div class="card">
                                                    <div class="card card-header bg-default" style="font-weight:bold;">
                                                        Import VM Role Configuration
                                                    </div>
                                                    <div class="card card-body">
                                                        <p>
                                                            Enter the new VM Roles Configuration JSON below and click <strong>Import</strong> to import the VM Roles Configuration. <strong>NOTE:</strong> This will overwrite the existing VM Roles Configuration.
                                                        </p>
                                                        <p>
                                                            <textarea title="New VM Role Config" class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newVmRoleConfig",(string)ui.Value);})">@newVmRoleConfig</textarea>
                                                        </p>
                                                        <p>
                                                            <button type="button" class="btn btn-success" @onclick="@(e => FormAction("ResourceVmRole",0,"update"))" title="Import">
                                                                <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                                            </button>
                                                        </p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                        break;
                }
            }
        </div>
        @if (admin)
        {
            <div>
                <h4>General Configuration</h4>
                <div class="card">
                    <h5 class="card-header text-white bg-secondary text-white">
                        <a class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#master" role="button" aria-expanded="false" aria-controls="master">
                            Master Configuration
                        </a>
                    </h5>
                    <div class="collapse card card-body" id="master">
                        <div class="card w-auto">
                            <div class="card card-header bg-default" style="font-weight:bold;">
                                Export the current Master Configuration
                            </div>
                            <div class="card card-body">
                                <p>
                                    Click <strong>Export</strong> to export the current Master Configuration. This includes all component, settings, and admin passwords/API keys.
                                </p>
                                <p>
                                    <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("Master",0,"download")) title="Export">
                                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export
                                    </button>
                                </p>
                            </div>
                        </div>
                        <div class="card">
                            <div class="card card-header bg-default" style="font-weight:bold;">
                                Import Master Configuration
                            </div>
                            <div class="card card-body">
                                <p>
                                    Enter the new Master Configuration JSON below and click <strong>Import</strong> to import the Master Configuration. <strong>NOTE:</strong> This will overwrite all existing Configurations.
                                </p>
                                <p>
                                    <textarea class="form-control" rows="8" type="text" @onchange="@((ui) => { SetFormValue("newMasterConfig",(string)ui.Value);})" />
                                </p>
                                <p>
                                    <button type="button" class="btn btn-success" @onclick="@(e => FormAction("Master",0,"update"))" title="Import">
                                        <span class="oi oi-data-transfer-upload" aria-hidden="true"></span> Import
                                    </button>
                                </p>
                            </div>
                        </div>

                    </div>
                </div>

                <div class="card">
                    <h5 class="card-header text-white bg-secondary">
                        <a class="link-light text-decoration-none" data-toggle="collapse" style="display:block;" href="#policy" role="button" aria-expanded="false" aria-controls="policy">
                            Policy
                        </a>
                    </h5>
                    <div class="collapse card card-body" id="policy">
                        <div class="card">
                            <div class="card card-header bg-default" style="font-weight:bold;">
                                Export Azure Policy Deifinition
                            </div>
                            <div class="card card-body">
                                <p>
                                    Click <strong>Export Azure Policy Definition</strong> to export an Azure Policy definition to use within your subscription.
                                </p>
                                <p>
                                    <button type="button" class="btn btn-primary" @onclick=@(e => FormAction("Policy",0,"download")) title="Export Azure Policy Definition">
                                        <span class="oi oi-data-transfer-download" aria-hidden="true"></span> Export Azure Policy Definition
                                    </button>
                                </p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        }
    }
</div>
<div class="toast">
    <div class="toast-header">
        Toast Header
    </div>
    <div class="toast-body">
        Some text inside the toast body
    </div>
</div>


@code {
    [Inject] public IBlazorDownloadFileService BlazorDownloadFileService { get; set; }
    [CascadingParameter] public IModalService Modal { get; set; }

    private ServicesData servicesData = new();
    private bool dataLoaded = false;
    private bool admin;

    private string? newComponentConfig;
    private string? newDelimiterConfig;
    private string? newEnvironmentName;
    private string? newEnvironmentShortName;
    private string? newEnvironmentConfig;
    private string? newLocationName;
    private string? newLocationShortName;
    private string? newLocationConfig;
    private string? newOrgName;
    private string? newOrgShortName;
    private string? newOrgConfig;
    private string? newProjAppSvcName;
    private string? newProjAppSvcShortName;
    private string? newProjAppSvcConfig;
    private string? newTypeConfig;
    private string? newUnitDeptName;
    private string? newUnitDeptShortName;
    private string? newUnitDeptConfig;
    private string? newVmRoleName;
    private string? newVmRoleShortName;
    private string? newVmRoleConfig;
    private string? newMasterConfig;

    private ResponseMessage message = new();

    protected override async Task OnInitializedAsync()
    {
        // Load the values from state
        admin = state.Admin;
        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
        dataLoaded = true;
    }


    public void Dispose()
    {
        StateHasChanged();
    }

    private async Task AdminChanged()
    {
        admin = state.Admin;
        servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
    }

    private async Task FormAction(string type, long id, string action)
    {
        message = new ResponseMessage();
        bool confirm = false;
        try
        {
            ServiceResponse serviceResponse;
            switch (type)
            {
                case "ResourceComponent":
                    ResourceComponent resourceComponent = new();
                    switch (action)
                    {
                        case "up":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            // Get the component in the list
                            if (resourceComponent.SortOrder > 1)
                            {
                                resourceComponent.SortOrder += -1;
                            }
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            if (resourceComponent.SortOrder <= servicesData.ResourceComponents.Count)
                            {
                                resourceComponent.SortOrder += 1;
                            }
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " move failed!";
                            }
                            break;
                        case "enable":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            resourceComponent.Enabled = true;
                            resourceComponent.SortOrder = servicesData.ResourceComponents.Count + 1;
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " enabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " enabling failed!";
                            }
                            break;
                        case "disable":
                            resourceComponent = servicesData.ResourceComponents.Find(x => x.Id == id);
                            resourceComponent.Enabled = false;
                            serviceResponse = await ResourceComponentService.PostItem(resourceComponent);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceComponent.Name + " disabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceComponent.Name + " disabling failed!";
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceComponentService.GetItems(true);
                            var componentjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("componentsconfig.json", JsonSerializer.Serialize(componentjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Components configruation and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourcecomponents.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Components configruation reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Components configruation reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newTypeConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Components configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceComponentService.PostConfig(JsonSerializer.Deserialize<List<ResourceComponent>>(newTypeConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Resource Components config update succeeded!";
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Resource Components config update failed!";
                                    }
                                }
                            }

                            break;
                    }
                    serviceResponse = await ResourceComponentService.GetItems(admin);
                    servicesData.ResourceComponents = (List<ResourceComponent>)serviceResponse.ResponseObject;
                    break;
                case "ResourceDelimiter":
                    ResourceDelimiter resourceDelimiter = new();
                    switch (action)
                    {
                        case "enable":
                            resourceDelimiter = servicesData.ResourceDelimiters.Find(x => x.Id == id);
                            resourceDelimiter.Enabled = true;
                            serviceResponse = await ResourceDelimiterService.PostItem(resourceDelimiter);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceDelimiter.Name + " enabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceDelimiter.Name + " enabling failed!";
                            }
                            break;
                        case "disable":
                            resourceDelimiter = servicesData.ResourceDelimiters.Find(x => x.Id == id);
                            resourceDelimiter.Enabled = false;
                            serviceResponse = await ResourceDelimiterService.PostItem(resourceDelimiter);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceDelimiter.Name + " disabled!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceDelimiter.Name + " disabling failed!";
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceDelimiterService.GetItems(admin);
                            var delimiterjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("delimitersconfig.json", JsonSerializer.Serialize(delimiterjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newDelimiterConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Delimiters configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceDelimiterService.PostConfig(JsonSerializer.Deserialize<List<ResourceDelimiter>>(newDelimiterConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Resource Delimiters config update succeeded!";
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Resource Delimiters config update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceDelimiterService.GetItems(admin);
                    servicesData.ResourceDelimiters = (List<ResourceDelimiter>)serviceResponse.ResponseObject;
                    break;
                case "ResourceEnvironment":
                    ResourceEnvironment resourceEnvironment;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                            if (resourceEnvironment.SortOrder > 1)
                            {
                                resourceEnvironment.SortOrder += -1;
                            }
                            serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceEnvironment.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceEnvironment.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                            if (resourceEnvironment.SortOrder <= servicesData.ResourceEnvironments.Count)
                            {
                                resourceEnvironment.SortOrder += 1;
                            }
                            serviceResponse = await ResourceEnvironmentService.PostItem(resourceEnvironment);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceEnvironment.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceEnvironment.Name + " move failed!";
                            }
                            break;
                        case "edit":
                            ShowEditModal((int)id, "ResourceEnvironment", "Edit Environment", "Edit the Environment.");
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceEnvironment = servicesData.ResourceEnvironments.Find(x => x.Id == id);
                                serviceResponse = await ResourceEnvironmentService.DeleteItem(Convert.ToInt32(resourceEnvironment.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceEnvironment.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceEnvironment.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            ShowAddModal((int)id, "ResourceEnvironment", "Add Environment", "<p>Add an Environment.</p><p><strong>NOTES</strong></p><ul><li>Short Name value will be converted to lower case.</li></ul>");
                            break;
                        case "download":
                            serviceResponse = await ResourceEnvironmentService.GetItems();
                            var environmentjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("environmentsconfig.json", JsonSerializer.Serialize(environmentjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Environments configruation and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourceenvironments.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Environments configruation reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Environments configruation reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newEnvironmentConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Environments configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceEnvironmentService.PostConfig(JsonSerializer.Deserialize<List<ResourceEnvironment>>(newEnvironmentConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Resource Environments config update succeeded!";
                                        newEnvironmentConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Resource Environments config update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceEnvironmentService.GetItems();
                    servicesData.ResourceEnvironments = (List<ResourceEnvironment>)serviceResponse.ResponseObject;
                    break;
                case "ResourceLocation":
                    ResourceLocation resourceLocation;
                    switch (action)
                    {
                        case "edit":
                            ShowEditModal((int)id, "ResourceLocation", "Edit Location", "Edit the Location.", true);
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceLocation = servicesData.ResourceLocations.Find(x => x.Id == id);
                                serviceResponse = await ResourceLocationService.DeleteItem(Convert.ToInt32(resourceLocation.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceLocation.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceLocation.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "download":
                            serviceResponse = await ResourceLocationService.GetItems();
                            var locationjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("locationsconfig.json", JsonSerializer.Serialize(locationjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Locations configruation and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourcelocations.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Locations configruation reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Locations configruation reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newLocationConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Locations configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceLocationService.PostConfig(JsonSerializer.Deserialize<List<ResourceLocation>>(newLocationConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Resource Locations config update succeeded!";
                                        newLocationConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Resource Locations config update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceLocationService.GetItems();
                    servicesData.ResourceLocations = (List<ResourceLocation>)serviceResponse.ResponseObject;
                    break;
                case "ResourceOrg":
                    ResourceOrg resourceOrg;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                            if (resourceOrg.SortOrder > 1)
                            {
                                resourceOrg.SortOrder += -1;
                            }
                            serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceOrg.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceOrg.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                            if (resourceOrg.SortOrder <= servicesData.ResourceOrgs.Count)
                            {
                                resourceOrg.SortOrder += 1;
                            }
                            serviceResponse = await ResourceOrgService.PostItem(resourceOrg);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceOrg.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceOrg.Name + " move failed!";
                            }
                            break;
                        case "edit":
                            ShowEditModal((int)id, "ResourceOrg", "Edit Org", "Edit the Org.<br /><br />Short Name must be 1-5 characters.");
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceOrg = servicesData.ResourceOrgs.Find(x => x.Id == id);
                                serviceResponse = await ResourceOrgService.DeleteItem(Convert.ToInt32(resourceOrg.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceOrg.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceOrg.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            ShowAddModal((int)id, "ResourceOrg", "Add Org", "<p>Add an Org.</p><p><strong>NOTES</strong></p><ul><li>Short Name value will be converted to lower case.</li><li>Short Name must be 1-5 characters.</li></ul>");
                            break;
                        case "download":
                            serviceResponse = await ResourceOrgService.GetItems();
                            var orgjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("orgsconfig.json", JsonSerializer.Serialize(orgjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Orgs configruation and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourceorgs.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Orgs configruation reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Orgs configruation reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newOrgConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Orgs configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceOrgService.PostConfig(JsonSerializer.Deserialize<List<ResourceOrg>>(newOrgConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Resource Orgs config update succeeded!";
                                        newOrgConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Resource Orgs config update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceOrgService.GetItems();
                    servicesData.ResourceOrgs = (List<ResourceOrg>)serviceResponse.ResponseObject;
                    break;
                case "ResourceProjAppSvc":
                    ResourceProjAppSvc resourceProjAppSvc;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                            if (resourceProjAppSvc.SortOrder > 1)
                            {
                                resourceProjAppSvc.SortOrder += -1;
                            }
                            serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceProjAppSvc.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceProjAppSvc.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                            if (resourceProjAppSvc.SortOrder <= servicesData.ResourceProjAppSvcs.Count)
                            {
                                resourceProjAppSvc.SortOrder += 1;
                            }
                            serviceResponse = await ResourceProjAppSvcService.PostItem(resourceProjAppSvc);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceProjAppSvc.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceProjAppSvc.Name + " move failed!";
                            }
                            break;
                        case "edit":
                            ShowEditModal((int)id, "ResourceProjAppSvc", "Edit Project/App/Service", "Edit the Project/App/Service.<br /><br />Short Name must be 1-3 characters.");
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceProjAppSvc = servicesData.ResourceProjAppSvcs.Find(x => x.Id == id);
                                serviceResponse = await ResourceProjAppSvcService.DeleteItem(Convert.ToInt32(resourceProjAppSvc.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceProjAppSvc.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceProjAppSvc.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            ShowAddModal((int)id, "ResourceProjAppSvc", "Add Project/App/Service", "<p>Add an Project/App/Service.</p><p><strong>NOTES</strong></p><ul><li>Short Name value will be converted to lower case.</li><li>Short Name must be 1-3 characters.</li></ul>");
                            break;
                        case "download":
                            serviceResponse = await ResourceProjAppSvcService.GetItems();
                            var projappsvcjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("projappsvcsconfig.json", JsonSerializer.Serialize(projappsvcjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Projects/Apps/Services configruation and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourceprojappsvcs.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Projects/Apps/Services configruation reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Projects/Apps/Services configruation reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newProjAppSvcConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Proejcts/Apps/Services configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceProjAppSvcService.PostConfig(JsonSerializer.Deserialize<List<ResourceProjAppSvc>>(newProjAppSvcConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "ProjAppSvcs configuration update succeeded!";
                                        newProjAppSvcConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "ProjAppSvcs configuration update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceProjAppSvcService.GetItems();
                    servicesData.ResourceProjAppSvcs = (List<ResourceProjAppSvc>)serviceResponse.ResponseObject;
                    break;
                case "ResourceType":
                    ResourceType resourceType = new();
                    switch (action)
                    {
                        case "edit":
                            ShowEditModal((int)id, "ResourceType", "Edit Resource Type", "Edit the Resource Type.", true);
                            break;
                        case "download":
                            serviceResponse = await ResourceTypeService.GetItems();
                            var typejson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("typesconfig.json", JsonSerializer.Serialize(typejson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Types configuration and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourcetypes.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Types configuration reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Types configuration reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newTypeConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Types configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceTypeService.PostConfig(JsonSerializer.Deserialize<List<ResourceType>>(newTypeConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Types configuration update succeeded!";
                                        newTypeConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Types configuration update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceTypeService.GetItems();
                    servicesData.ResourceTypes = (List<ResourceType>)serviceResponse.ResponseObject;
                    break;
                case "ResourceUnitDept":
                    ResourceUnitDept resourceUnitDept;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                            if (resourceUnitDept.SortOrder > 1)
                            {
                                resourceUnitDept.SortOrder += -1;
                            }
                            serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceUnitDept.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceUnitDept.Name + " move failed!";
                            }
                            break;
                        case "down":
                            resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                            if (resourceUnitDept.SortOrder <= servicesData.ResourceUnitDepts.Count)
                            {
                                resourceUnitDept.SortOrder += 1;
                            }
                            serviceResponse = await ResourceUnitDeptService.PostItem(resourceUnitDept);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceUnitDept.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceUnitDept.Name + " move failed!";
                            }
                            break;
                        case "edit":
                            ShowEditModal((int)id, "ResourceUnitDept", "Edit Unit/Dept", "Edit the Unit/Dept.<br /><br />Short Name must be 1-3 characters.");
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceUnitDept = servicesData.ResourceUnitDepts.Find(x => x.Id == id);
                                serviceResponse = await ResourceUnitDeptService.DeleteItem(Convert.ToInt32(resourceUnitDept.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceUnitDept.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceUnitDept.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            ShowAddModal((int)id, "ResourceUnitDept", "Add Unit/Dept", "<p>Add a Unit/Dept.</p><p><strong>NOTES</strong></p><ul><li>Short Name value will be converted to lower case.</li><li>Short Name must be 1-3 characters.</li></ul>");
                            break;
                        case "download":
                            serviceResponse = await ResourceUnitDeptService.GetItems();
                            var unitdeptjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("unitdeptsconfig.json", JsonSerializer.Serialize(unitdeptjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current Units/Depts configuration and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourceunitdepts.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "Units/Depts configuration reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "Units/Depts configuration reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newUnitDeptConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Units/Depts confgiruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceUnitDeptService.PostConfig(JsonSerializer.Deserialize<List<ResourceUnitDept>>(newUnitDeptConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Units/Depts configuration update succeeded!";
                                        newVmRoleConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Units/Depts configuration update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceUnitDeptService.GetItems();
                    servicesData.ResourceUnitDepts = (List<ResourceUnitDept>)serviceResponse.ResponseObject;
                    break;
                case "ResourceVmRole":
                    ResourceVmRole resourceVmRole;
                    switch (action)
                    {
                        case "up":
                            // Get the component in the list
                            resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                            if (resourceVmRole.SortOrder > 1)
                            {
                                resourceVmRole.SortOrder += -1;
                            }
                            serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceVmRole.Name + " moved up!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceVmRole.Name + " move failed!";
                            }

                            break;
                        case "down":
                            resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                            if (resourceVmRole.SortOrder <= servicesData.ResourceOrgs.Count)
                            {
                                resourceVmRole.SortOrder += 1;
                            }
                            serviceResponse = await ResourceVmRoleService.PostItem(resourceVmRole);
                            if (serviceResponse.Success)
                            {
                                message.Type = MessageTypesEnum.SUCCESS;
                                message.Message = resourceVmRole.Name + " moved down!";
                            }
                            else
                            {
                                message.Type = MessageTypesEnum.ERROR;
                                message.Message = resourceVmRole.Name + " move failed!";
                            }
                            break;
                        case "edit":
                            ShowEditModal((int)id, "ResourceVmRole", "Edit VM Role", "Edit the VM Role.<br /><br />Short Name must be 1-2 characters.");
                            break;
                        case "delete":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure?");
                            if (confirm)
                            {
                                resourceVmRole = servicesData.ResourceVmRoles.Find(x => x.Id == id);
                                serviceResponse = await ResourceVmRoleService.DeleteItem(Convert.ToInt32(resourceVmRole.Id));
                                if (serviceResponse.Success)
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = resourceVmRole.Name + " deleted!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = resourceVmRole.Name + " deletion failed!";
                                }
                            }
                            break;
                        case "add":
                            ShowAddModal((int)id, "ResourceVmRole", "Add VM Role", "<p>Add an VM Role.</p><p><strong>NOTES</strong></p><ul><li>Short Name value will be converted to lower case.</li><li>Short Name must be 1-2 characters.</li></ul>");
                            break;
                        case "download":
                            serviceResponse = await ResourceVmRoleService.GetItems();
                            var vmroleson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("vmrolesconfig.json", JsonSerializer.Serialize(vmroleson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "reset":
                            confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will reset your current VM Roles configuration and cannot be undone!\n\nAre you sure?");
                            if (confirm)
                            {
                                if (FileSystemHelper.ResetConfiguration("resourcevmroles.json"))
                                {
                                    message.Type = MessageTypesEnum.SUCCESS;
                                    message.Message = "VM Roles configuration reset!";
                                }
                                else
                                {
                                    message.Type = MessageTypesEnum.ERROR;
                                    message.Message = "VM Roles configuration reset failed!";
                                }
                            }
                            break;
                        case "update":
                            if (newVmRoleConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current VM Roles configuration and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ResourceVmRoleService.PostConfig(JsonSerializer.Deserialize<List<ResourceVmRole>>(newVmRoleConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "VM Roles configuration update succeeded!";
                                        newVmRoleConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "VM Roles configuration update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    serviceResponse = await ResourceVmRoleService.GetItems();
                    servicesData.ResourceVmRoles = (List<ResourceVmRole>)serviceResponse.ResponseObject;
                    break;
                case "Master":
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await ImportExportService.ExportConfig();
                            var masterjson = serviceResponse.ResponseObject;
                            await BlazorDownloadFileService.DownloadFileFromText("masterconfig.json", JsonSerializer.Serialize(masterjson).ToString(), System.Text.Encoding.UTF8, "application/octet-stream");
                            break;
                        case "update":
                            if (newMasterConfig != null)
                            {
                                confirm = await JsRuntime.InvokeAsync<bool>("confirm", "WARNING!\n\nThis will update your current Master configruation and cannot be undone!\n\nAre you sure?");
                                if (confirm)
                                {
                                    serviceResponse = await ImportExportService.PostConfig(JsonSerializer.Deserialize<ConfigurationData>(newMasterConfig));
                                    if (serviceResponse.Success)
                                    {
                                        message.Type = MessageTypesEnum.SUCCESS;
                                        message.Message = "Master config update succeeded!";
                                        newMasterConfig = null;
                                    }
                                    else
                                    {
                                        message.Type = MessageTypesEnum.ERROR;
                                        message.Message = "Master config update failed!";
                                    }
                                }
                            }
                            break;
                    }
                    break;
                case "Policy":
                    switch (action)
                    {
                        case "download":
                            serviceResponse = await PolicyService.GetPolicy();
                            var policyjson = serviceResponse.ResponseObject;

                            var stream = new MemoryStream();
                            var writer = new StreamWriter(stream);
                            writer.Write(serviceResponse.ResponseObject);
                            writer.Flush();
                            stream.Position = 0;

                            string policyString = Encoding.Default.GetString(stream.ToArray());

                            await BlazorDownloadFileService.DownloadFileFromText("namePolicyDefinition.json", policyString, System.Text.Encoding.UTF8, "application/json");
                            break;
                    }
                    break;
            }
            servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
        }
        catch (Exception ex)
        {
            message.Type = MessageTypesEnum.ERROR;
            message.Message = "There was a problem with the request.";
        }


        if (message.Message != null)
        {
            switch (message.Type)
            {
                case MessageTypesEnum.INFORMATION:
                    toastService.ShowInfo(message.Message, "INFORMATION");
                    break;
                case MessageTypesEnum.SUCCESS:
                    toastService.ShowSuccess(message.Message, "SUCCESS");
                    break;
                case MessageTypesEnum.WARNING:
                    toastService.ShowWarning(message.Message, "WARNING");
                    break;
                case MessageTypesEnum.ERROR:
                    toastService.ShowError(message.Message, "ERROR");
                    break;
            }
        }
    }

    private void SetFormValue(string type, string value)
    {
        switch (type)
        {
            case "newComponentConfig":
                newComponentConfig = value;
                break;
            case "newDelimiterConfig":
                newDelimiterConfig = value;
                break;
            case "newEnvironmentName":
                newEnvironmentName = value;
                break;
            case "newEnvironmentShortName":
                newEnvironmentShortName = value;
                break;
            case "newEnvironmentConfig":
                newEnvironmentConfig = value;
                break;
            case "newLocationName":
                newLocationName = value;
                break;
            case "newLocationShortName":
                newLocationShortName = value;
                break;
            case "newLocationConfig":
                newLocationConfig = value;
                break;
            case "newOrgName":
                newOrgName = value;
                break;
            case "newOrgShortName":
                newOrgShortName = value;
                break;
            case "newOrgConfig":
                newOrgConfig = value;
                break;
            case "newProjAppSvcName":
                newProjAppSvcName = value;
                break;
            case "newProjAppSvcShortName":
                newProjAppSvcShortName = value;
                break;
            case "newProjAppSvcConfig":
                newProjAppSvcConfig = value;
                break;
            case "newTypeConfig":
                newTypeConfig = value;
                break;
            case "newUnitDeptName":
                newUnitDeptName = value;
                break;
            case "newUnitDeptShortName":
                newUnitDeptShortName = value;
                break;
            case "newUnitDeptConfig":
                newUnitDeptConfig = value;
                break;
            case "newVmRoleName":
                newVmRoleName = value;
                break;
            case "newVmRoleShortName":
                newVmRoleShortName = value;
                break;
            case "newVmRoleConfig":
                newVmRoleConfig = value;
                break;
            case "newMasterConfig":
                newMasterConfig = value;
                break;
        }
    }

    async void ShowAddModal(int id, string type, string title, string message)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(AddModal.id), id);
        parameters.Add(nameof(AddModal.type), type);
        parameters.Add(nameof(AddModal.message), message);
        parameters.Add(nameof(AddModal.title), title);

        var options = new ModalOptions()
            {
                HideCloseButton = true,
                UseCustomLayout = true
            };

        var modal = Modal.Show<AddModal>(title, parameters, options);
        var result = await modal.Result;
        if (result.Cancelled)
        {
        }
        else
        {
            servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
            StateHasChanged();
        }
    }


    async void ShowEditModal(int id, string type, string title, string message, bool protectedname = false)
    {
        var parameters = new ModalParameters();
        parameters.Add(nameof(EditModal.id), id);
        parameters.Add(nameof(EditModal.type), type);
        parameters.Add(nameof(EditModal.message), message);
        parameters.Add(nameof(EditModal.title), title);
        parameters.Add(nameof(EditModal.protectedName), protectedname);

        var options = new ModalOptions()
            {
                HideCloseButton = true,
                UseCustomLayout = true
            };

        var modal = Modal.Show<EditModal>(title, parameters, options);
        var result = await modal.Result;
        if (result.Cancelled)
        {
        }
        else
        {
            servicesData = await ServicesHelper.LoadServicesData(servicesData, admin);
            StateHasChanged();
        }
    }
}